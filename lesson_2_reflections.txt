What happens when you initialize a repository? Why do you need to do it?

	When a git repository is initialized, a new git repository is created which is empty (0 commits) as it is not tracking any files yet, therefore it contains no commits when it is initialized. On running git status, the untracked files are shown. 
	It is required in order to create a git repository, add files to it and start maintaining it.
	Git repository is different from a normal directory as it stores a bunch of metadata which helps in tracking files in the form of commits.
	It is stored on harddrive (working directory) as .git and is hidden.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Git offers more control instead of just directly adding files to the commit. It enables to apply the thumb rule of making commits, i.e. one commit per logical change, seamlessly. It allows to specify exactly what changes to commit.
	Staging area is an intermediate area where the files are added one at a time before from the working directory before entering the repository.
	While the "working directory" does not offer version control, "git repository" does. But to create "git repository", commits are created allowing exactly which changes commit using "staging area".

How can you use the staging area to make sure you have one commit per logical
change?



What are some situations when branches would be helpful in keeping your history
organized? How would branches help?



How do the diagrams help you visualize the branch structure?



What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?



What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

